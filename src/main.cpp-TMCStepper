#include <TMCStepper.h>
//#include <SoftwareSerial.h>         // Use software serial for the UART to TMC2209 
# include <Streaming.h>             // For debugging
#include <SpeedyStepper.h>          // SpeedyStepper library

#define EN_PIN           23          // Enable - PURPLE
#define DIR_PIN          19          // Direction - WHITE
#define STEP_PIN         21          // Step - ORANGE
#define SW_SCK           5          // Software Slave Clock (SCK) - BLUE
#define SW_TX            17          // SoftwareSerial receive pin - BROWN
#define SW_RX            16          // SoftwareSerial transmit pin - YELLOW
#define DRIVER_ADDRESS   0b00       // TMC2209 Driver address according to MS1 and MS2
#define R_SENSE 0.11f               // SilentStepStick series use 0.11 ...and so does my fysetc TMC2209 (?)


//SoftwareSerial SoftSerial(SW_RX, SW_TX);

TMC2209Stepper TMC_Driver(&Serial2, R_SENSE, DRIVER_ADDRESS);
SpeedyStepper stepper; // Create instance of SpeedyStepper


//== Setup ======================================================================================

void setup() {

  Serial.begin(115200);               // initialize hardware serial for debugging
  Serial2.begin(115200, SERIAL_8N1, SW_RX, SW_TX);            // initialize software serial for UART motor control
  stepper.connectToPins(DIR_PIN, STEP_PIN); // Connect the stepper object to the pins
  
  delay(1000);
  Serial.println("TMC2209 Stepper Test");
  pinMode(EN_PIN, OUTPUT);
  digitalWrite(EN_PIN, LOW);          // Enable driver in hardware
  pinMode(STEP_PIN, OUTPUT);
  pinMode(DIR_PIN, OUTPUT);

  //TMC_Driver.beginSerial(115200);     // Initialize UART

  TMC_Driver.begin();                                                                                                                                                                                                                                                                                                                            // UART: Init SW UART (if selected) with default 115200 baudrate
  TMC_Driver.toff(5);                 // Enables driver in software
  TMC_Driver.rms_current(3000);       // Set motor RMS current
  TMC_Driver.microsteps(128);         // Set microsteps

  TMC_Driver.en_spreadCycle(false);   // Toggle spreadCycle
  TMC_Driver.pwm_autoscale(true);     // Needed for stealthChop
  
  stepper.setCurrentPositionInSteps(0);      // Set current position to 0
  //stepper.setSpeedProfile(200000, 200000); // Set acceleration and deceleration in steps per second per second
  stepper.setStepsPerRevolution(2*200); // Set number of steps per revolution
  stepper.setSpeedInStepsPerSecond(2000); // Set maximum speed in steps per second
}

//== Loop ========================================================================================

int rms = 1600;
long stepperSpeed = 100;

void loop() {

  //int potVal = analogRead(A0);                              // Read potentiometer (0-1023)

    Serial.print("0 ");
    Serial.print(TMC_Driver.SG_RESULT(), DEC);
    Serial.print(" ");
    Serial.print(TMC_Driver.test_connection());
    Serial.print(" ");
    Serial.print(TMC_Driver.cs2rms(TMC_Driver.cs_actual()), DEC);
    Serial.printf(" %d, MSTEPS: %d", TMC_Driver.GSTAT(), TMC_Driver.microsteps());

    Serial.println();
  // if (potVal <= 500)                                        // In lower half of range turn counter clockwise
  // {                                                         // (direction depends on motor wiring?)
  //   stepperSpeed =  map(potVal, 0, 500, -200000, 0);
  // }
  // else if (potVal >= 520)                                   // In high half of range turn clockwise
  // {
  //   stepperSpeed =  map(potVal, 520, 1023, 0, 200000);
  // }else                                                     // Create a "dead zone" between CW and CCW
  // {                                                         // if 500 < potVal <520
  //   stepperSpeed = 0;                                           
  // }

  //Serial << potVal << "       " << stepperSpeed << endl;
  //stepper.setSpeedInStepsPerSecond(stepperSpeed); // Set speed in steps per second
  //TMC_Driver.rms_current(rms);       // Set motor RMS current
  stepperSpeed += 100;
  if (stepperSpeed > 16000) {
    stepperSpeed = 100;
    TMC_Driver.microsteps(32);
  }
  Serial << "Speed: " << stepperSpeed << endl;
  //Serial << "RMS: " << rms << endl;
  //stepper.moveToPositionInSteps(2*200);         // Move 16 revolutions (clockwise)
  //stepper.moveToPositionInSteps(0);         // Move 16 revolutions (clockwise)
  TMC_Driver.VACTUAL(0);
  //TMC_Driver.
  //TMC_Driver.step();
  delay(10);
} // end loop