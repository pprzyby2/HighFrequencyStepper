/*
 * HighFrequencyStepper Example
 * Demonstrates how to use the HighFrequencyStepper class to control multiple steppers
 * with PWMStepper, PulseCounter, and TMC2209 integration
 */

#include <Arduino.h>
#include "HighFrequencyStepper.h"

// Create HighFrequencyStepper instance
HighFrequencyStepper stepperController;

void setup() {
    Serial.begin(115200);
    delay(2000);
    
    Serial.println("=== HighFrequencyStepper Example ===");
    
    // Configuration for Stepper 0
    StepperConfig config0;
    config0.stepPin = 19;           // Step pin
    config0.dirPin = 21;            // Direction pin
    config0.enablePin = 23;         // Enable pin
    config0.stepCountPin = 22;      // Pulse counter pin
    config0.txPin = 17;             // UART TX for TMC
    config0.rxPin = 16;             // UART RX for TMC
    config0.driverAddress = 0b00;   // TMC2209 address
    config0.rSense = 0.11f;         // Current sense resistor
    config0.microsteps = 16;        // 16 microsteps
    config0.rmsCurrent = 800;       // 800mA RMS current
    config0.stepsPerRev = 200;      // 200 steps per revolution
    config0.maxFrequency = 100000;  // 100kHz max frequency
    config0.ledcChannel = 0;        // LEDC channel 0
    config0.pcntUnit = PCNT_UNIT_0; // Pulse counter unit 0
    
    // Configuration for Stepper 1 (example second stepper)
    StepperConfig config1;
    config1.stepPin = 18;           // Different step pin
    config1.dirPin = 5;             // Different direction pin
    config1.enablePin = 23;         // Can share enable pin
    config1.stepCountPin = 4;       // Different pulse counter pin
    config1.txPin = 25;             // Different UART TX
    config1.rxPin = 26;             // Different UART RX
    config1.driverAddress = 0b01;   // Different TMC address
    config1.rSense = 0.11f;         
    config1.microsteps = 32;        // Different microsteps
    config1.rmsCurrent = 1000;      // Different current
    config1.stepsPerRev = 200;      
    config1.maxFrequency = 50000;   // Different max frequency
    config1.ledcChannel = 1;        // Different LEDC channel
    config1.pcntUnit = PCNT_UNIT_1; // Different pulse counter unit
    
    // Add steppers to controller
    if (!stepperController.addStepper(0, config0)) {
        Serial.println("Failed to add stepper 0");
        return;
    }
    
    if (!stepperController.addStepper(1, config1)) {
        Serial.println("Failed to add stepper 1");
        return;
    }
    
    // Initialize all steppers
    if (!stepperController.initializeAll()) {
        Serial.println("Failed to initialize steppers");
        return;
    }
    
    // Enable all steppers
    stepperController.enableAll();
    
    // Print initial status
    stepperController.printAllStatus();
    
    // Perform self-test
    if (stepperController.selfTestAll()) {
        Serial.println("All steppers ready for operation!");
    } else {
        Serial.println("Some steppers failed self-test!");
    }
}

void loop() {
    static uint32_t lastDemo = 0;
    static uint8_t demoStep = 0;
    
    if (millis() - lastDemo > 5000) { // Demo every 5 seconds
        lastDemo = millis();
        
        Serial.println("\n=== Demo Step " + String(demoStep) + " ===");
        
        switch (demoStep) {
            case 0:
                // Demo: Move stepper 0 to position 1000
                Serial.println("Moving stepper 0 to position 1000 at 10kHz");
                stepperController.moveToPosition(0, 1000, 10000);
                break;
                
            case 1:
                // Demo: Move stepper 1 relative 500 steps
                Serial.println("Moving stepper 1 relative 500 steps at 5kHz");
                stepperController.moveRelative(1, 500, 5000);
                break;
                
            case 2:
                // Demo: Start continuous movement
                Serial.println("Starting continuous movement on stepper 0 at 1kHz");
                stepperController.startContinuous(0, 1000, true);
                break;
                
            case 3:
                // Demo: Stop continuous movement
                Serial.println("Stopping stepper 0");
                stepperController.stop(0);
                break;
                
            case 4:
                // Demo: Change microsteps
                Serial.println("Changing stepper 0 to 8 microsteps");
                stepperController.setMicrosteps(0, 8);
                break;
                
            case 5:
                // Demo: Change current
                Serial.println("Changing stepper 1 current to 1200mA");
                stepperController.setRMSCurrent(1, 1200);
                break;
                
            case 6:
                // Demo: Zero positions
                Serial.println("Zeroing all positions");
                stepperController.zeroPosition(0);
                stepperController.zeroPosition(1);
                break;
                
            case 7:
                // Demo: High frequency test
                Serial.println("High frequency test: 100kHz on stepper 0");
                stepperController.moveRelative(0, 1000, 100000);
                break;
                
            case 8:
                // Demo: Low frequency test (Timer mode)
                Serial.println("Low frequency test: 100Hz on stepper 1 (Timer mode)");
                stepperController.moveRelative(1, 200, 100);
                break;
                
            case 9:
                // Demo: Synchronized movement
                {
                    Serial.println("Synchronized movement test");
                    int32_t positions[] = {2000, 1500, 0, 0}; // Only first 2 used
                    stepperController.moveAllToPosition(positions, 5000);
                }
                break;
                
            default:
                demoStep = -1; // Will be incremented to 0
                break;
        }
        
        demoStep++;
        
        // Print status after each demo
        delay(100);
        stepperController.printAllStatus();
    }
    
    // Monitor for any issues
    static uint32_t lastCheck = 0;
    if (millis() - lastCheck > 1000) { // Check every second
        lastCheck = millis();
        
        // Check for stall detection
        for (uint8_t i = 0; i < stepperController.getStepperCount(); i++) {
            if (stepperController.isStallDetected(i)) {
                Serial.println("WARNING: Stall detected on stepper " + String(i));
                stepperController.stop(i);
            }
        }
    }
    
    // Handle serial commands for interactive control
    if (Serial.available()) {
        String command = Serial.readStringUntil('\n');
        command.trim();
        
        if (command == "status") {
            stepperController.printAllStatus();
        }
        else if (command == "stop") {
            stepperController.stopAll();
            Serial.println("All steppers stopped");
        }
        else if (command == "enable") {
            stepperController.enableAll();
            Serial.println("All steppers enabled");
        }
        else if (command == "disable") {
            stepperController.disableAll();
            Serial.println("All steppers disabled");
        }
        else if (command == "test") {
            stepperController.selfTestAll();
        }
        else if (command == "zero") {
            stepperController.zeroPosition(0);
            stepperController.zeroPosition(1);
            Serial.println("All positions zeroed");
        }
        else if (command.startsWith("move")) {
            // Parse move command: "move 0 1000 5000" (stepper, position, frequency)
            int space1 = command.indexOf(' ', 5);
            int space2 = command.indexOf(' ', space1 + 1);
            
            if (space1 > 0 && space2 > 0) {
                uint8_t stepper = command.substring(5, space1).toInt();
                int32_t position = command.substring(space1 + 1, space2).toInt();
                double frequency = command.substring(space2 + 1).toDouble();
                
                Serial.println("Moving stepper " + String(stepper) + " to " + String(position) + " at " + String(frequency) + "Hz");
                stepperController.moveToPosition(stepper, position, frequency);
            }
        }
        else if (command == "help") {
            Serial.println("Available commands:");
            Serial.println("  status - Print stepper status");
            Serial.println("  stop - Stop all steppers");
            Serial.println("  enable - Enable all steppers");
            Serial.println("  disable - Disable all steppers");
            Serial.println("  test - Run self-test");
            Serial.println("  zero - Zero all positions");
            Serial.println("  move <stepper> <position> <frequency> - Move stepper");
            Serial.println("  help - Show this help");
        }
        else {
            Serial.println("Unknown command. Type 'help' for available commands.");
        }
    }
    
    delay(10); // Small delay for stability
}

/*
 * Example Serial Commands:
 * 
 * status                    - Show all stepper status
 * move 0 1000 10000        - Move stepper 0 to position 1000 at 10kHz
 * move 1 -500 5000         - Move stepper 1 to position -500 at 5kHz
 * stop                     - Stop all steppers
 * enable                   - Enable all steppers
 * disable                  - Disable all steppers
 * test                     - Run self-test on all steppers
 * zero                     - Zero all positions
 * help                     - Show help
 */